#day10

Properties : Map의 역할을 하는 클래스	
			 일반 map과는 다르게 파일(외부장치)을 이용해서 직접 데이터를 읽고
			 map처럼 저장할 수있고 Map에 저장된 데이터를 직접 파일(외부장치)로
			 출력해서 저장할 수 있다
	단점 ) 파일의 내용을 읽을 때, 인코딩이 되지 않는다
			> 한글파일의 경우, 파일 자체에서 인코딩을 하지 않고
			  내용이 한글인 경우는 한글이 깨져서 들어온다
			> 한글이 포함된 파일을 properties에서 사용하기 위해 인코딩 하는 방법
				1. cmd창을 연다
				2. 환경변수와 path는 설정이 되어있어야한다
					> cmd창 어느곳에서나 javac가 호출 가능해야한다
				3. native2ascii 프로그램을 이용해서 인코딩을 해준다
					> 형식 ) native2ascii 인코딩안된파일 인코딩적용된저장할파일
	참고 ) properties는 오직 String으로만 키값과 데이터를 처리한다
		   현재 프로그램의 정보를 map으로 자동 처리하는 기능을 가지고있다		
	

Generics(제너릭스) : 컬렉션은 모든 형태의 데이터를 입력받을 수 있다
						> 데이터를 입력받을 때 , Object 형태로 자동 향변환해서 기억하기 때문
				     다만, 실무에서는 한가지 형태로 입력받는 것을 원칙으로 한다
				     하지만 연산을 할때 보면 항상 강제 형변환을 해주어야하는데 
				     이는 꺼낼때는 자동 형변환이 되지않는 것을 의미한다
				     따라서, 제네릭스란, 컬렉션에 입력하는 데이터의 타입을 미리 알려주어서 
				     나중에 꺼낼 때 형변환없이 꺼낼 수 있도록 해주는 것이다
			형식 ) ArrayList<데이터타입> 변수이름 = new ArrayList<데이터타입>();
			참고 ) 원칙은 반드시 컬렉션마다 제너릭스 선언을 해주어야한다
				   제너릭스는 전파가되지않는다
				    	> 하나의 컬렉션에 제너릭스가 선언되었더라도 그 컬렉션을 이용하는 다른 컬렉션도 
				    	  다시 제너릭스 선언을 해주어야한다
			특수한 제너릭스 ) 원래 제너릭스는 특정 클래스만 입력받을 목적으로 사용된다
							  제너릭스를 선언하지 않은 것과 동일한 효과를 지닐 수 도 있다
							  	> 나중에 꺼내서 사용할 때 다시 형변환을 해주어야하기 때문
					형식 ) 
					1. <? super 클래스이름> : 클래스이름 포함 상위 모든 클래스의 입력을 허락한다는 의미
												> 예 ) <? super Integer> : Integer, Number, Object 입력 가능
				 	2. <? extends 클래스이름> : 클래스이름 포함 모든 하위 클래스의 입력을 허락한다는 의미
				 	
				 		예 ) HashMap<String, HashMap<String, Object>> 같은 형태도 가능
				 	
				 	
어노테이션 : 내부적으로 약속된 실행을 자동적으로 처리하도록 하는 명령
			 즈로 화면에 직접 보이는 실행이 아니고 점검이나 선언적인 실행(클래스 작동의 조건)의 의미를 가진 명령
	형식 ) @명령
	예 ) @Override, @author
				     

오늘 5일(금) ~~ 오프닝클럽 마감
내일 6일(토) ~~ 
모레 7일(일) ~~
내일모레 8일(월) ~~ 