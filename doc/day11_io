#day11
@see - java.io
실행속도는 c언어가 제일 빠르지만 개발 속도가 느림 > 객체지향언어의 탄생 배경
하지만 아직 모든 언어들이 c언어를 완전히 벗어날 수 는 없음 > 각 언어들이 유사성을 띄는 이유도 바탕이 모두 c언어라서 그럼

flag 기법
	: 우리가 프로그램으로 실행하다보면 두가지 이상의 경우가 발생하는 순간이 존재함(조건문)
	  그 후에 어떤 경우가 발생했을지를 알아보는 기법
	  	예 ) for(){
	  				실행문...
	  				if(???){
	  					break;
	  						}
	  			  }(1)
	  			  	> 1. (1)부분은 for명령이 정상종료 된 후에 실행되는 부분이다
	  			  	  2. 그런데 (1) 부분을 실행할 때 위의 반복문이 정상적으로 모두 반복된 후 실행하는지 아니면 
	  			  	  	 중간에 종료되서 실행되는지 알 수 없다
	  			  	  	 그래서 이것을 알아내기 위해 사용하는 기법
	 >	방법 ) 시작전에 변수를 하나 만들고 최값을 설정한다
	 		   특정 순간이 발생하면 변수의 데이터 초기값에서 다른 데이터로 변경한다
	 		   결국, (1) 부분을 실행할 때 위의 	
	  			

	  			
Stream : 자바는 외부장치와 데이터를 주고 받는 방법을 한가지로 통일시켜두었다
			> 그게 Stream
		 Stream은 쉽게 생각하면 빨대
		 	> 단순히 꽂는 것 만으로는 데이터를 가져올 수 없음 (함수를 사용해야함)
		 	> 단방향 (방향성이 있어서 주고받으려면 스트림 2개 필요)
		 	> 데이터를 가져오는 때가 아니면 비어있음
		즉, 스트림을 데이터를 주고받는 외부장치에 꽂기만하면 프로그래머는 함수를 이용하여 
		외부장치 데이터를 가져올 수 있다
		
	종류 ) 
		1. 방향성	
			> 프로그램으로 데이터가 들어오는 방향 : InputStream, Reader
			> 프로그램에서 데이터가 나가는 방향 : OutputStream, Writer
		2. 데이터 양
			> byte 단위 (1byte) : InputStream, OutputStream
									> 1byte씩 처리하므로 느리지만 기계어 처리도 가능하다
									> 이름에 Stream이 들어가면 byte기반
			> char 단위 (2char) : Reader, Writer
									> 2char씩 처리하므로 빠르지만 오직 문자어 처리만 가능하다
			참고 ) byte가 char로 바뀌는 순간, 운영 체제에 따라 비트순서가 바뀔 수 있다
		3. 상대방 종류
			> target Stream(기본 스트림) : 외부 장치에 직접 연결된 스트림
			> Filter Stream(보조 스트림) : 스트림의 성능 향상, 개발자의 편의를 위해 
										   스트림에 연결되는 스트림
			참고 ) 외부 장치에 연결할 때 반드시 기본 스트림은 존재해야한다
					> 보조스트림 단일로 사용불가
			
			
			
byte기반 스트림
	1. InputStream 
		기본 함수 ) int read() : 오직 한 문자만(1byte) 읽어들이는 함수
								 반환값은 읽은 문자
					int read(byte[] b) : 여러 바이트를 읽어들이는 함수 
										 읽은 결과는 byte[] b에 기억되먀 반환값은 읽은 데이터의 개수	
					int read(byte[] b, int off, int len) : 여러 바이트를 읽어들이는 함수 
														   다만, 배열의 지정한 위치부터 지정한 개수만큼만 읽는다
														   반환값은 읽은 데이터 개수 (바이트 수)
														   
	2. FileInputStream : 파일에 연결된 입력용 스트림
		생성 방법 ) FileInputStream(String 파일이름) : 스트림을 연결한 파일의 이름을 이용해서 스트림을 연결한다
													   해당하는 파일이름이 없으면 오류가 발생하므로 예외처리를 해주어야한다
	3. FileOutputStream : 파일로 연결된 보내는 방향의 스트림
		기본함수 ) void write(int b) : 한글자만 내보내는 함수
				   void write(byte[] b) : 여러글자를 내보내는 함수
				   void write(byte[] b, int off, int len) : 여러글자를 내보내는 함수
				   											int off > 내보낼 시작위치
				   											int len : 내보낼 데이터 개수
				   											
				   											
File : 스트림은 아니다(Object클래스를 상속받음)
	   다만 우리가 외부장치중에서 가장 많이 사용하는 것이 파일이다보니 
	   파일에 대한 정보를 처리하기 위해 만들어진 클래ㅅ,
	생성방법 ) File(String name) : 파일의 경로와 이름을 지정하며 만든다
			   File(String parent, String child) : 파일의 경로와 이름을 따로 지정하여 만든다
			   File(File parent, String child) : 파일의 정보를 이용하고 파일의 이름만을 다시 지정하여 만든다
			 		참고 ) 자바에서 파일은 폴더 자체도 파일로 인정한다
			 				예 ) File f = new File("c:\\");
			 									> c드라이브는 루트폴더
			   File(URI uri) : 네트워크에서 다른 시템에 있는 파일의 정보를 만든다
			  					> uri ) 통합자원주소. 인터넷에 있는 자원을 나타내는 유일한 주소
			   참고함수 ) 
			   		1. 정보를 알여주는 함수 
			   			> getName() : 파일의 이름만 알려주는 함수
			   			> getParent() : 폴더의 이름만 알려주는 함수
			   			> exists() : 파일의 존재여부를 알려주는 함수
			   			> length() : 파일의 크기를 알려주는 함수
			   		2. 외부적인 작업을 하기 위한 함수
			   			> delete() : 파일 삭제
			   			> mkdir() : 폴더 만들기(지정한 폴더 하나만 만든다) 
			   			> mkdirs() : 폴더 만들기(계층으로 만들 수 있다 > 경로상에 없는 폴더는 모두 만든다) 
			   			> renameTo() : 파일이름변경
			   			> list() :  폴더에 있는 파일의 목록을 구하는 함수
			   				참고 ) 
			   					1. 파일 목록을 알아내는 함수
			   					   String[] list() : 파일 이름만 알려준다
			   					   File[] listFiles() : 파일 정보를 알려준다 
			   					2. 필터링해서 리스트를 반환해주는 함수
			   						String[] list(FileNameFilter filter)
			   						File[] listFiles(FileFilter filter)
			   						File[] listFiles(FilenameFilter filter)
			   						
			   						
byte기반 보조스트림(필터 스트림)
	: 기본 스트림 외에 기능을 추가하거나 사용자에게 편의를 제공하기 위한 보조적인 기능을 하는 스트림
	: 반드시 기본 스트림은 존재해야하며 필터스트림은 필요에 따라 사용한다
	: 필터 스트림 역시 방향성을 가지고있어서 반드시 같은 방향끼리만 연결해야한다
	
	종류) 1. BufferedInputStream / BufferedOutputStream
			  : 임시저장공간 buffer에 모아뒀다가 한번에 꺼내오는 기능이 추가된 스트림
			  : 사용자 편의 기능은 없고 대신, 스트림의 성능을 향상시키기 위한 목적으로 사용된다
				 참고함수 ) 1. flush() : 강제로 버퍼를 비우는 함수
											> 버퍼메모리는 반드시 가득차야지만 자동으로 파일을 꺼내올 수 있다
											> 경우에따라서는 버퍼메모리사이즈보다 작은 사이즈의 데이터를 꺼내야하는 경우가 있는데
											  그럴때 사용하는 함수
											> StringTokenizer처럼 한번 꺼내온 데이터는 사라진다
		  2. DataInputStream / DataOutputStream 
		  	  : 많이 사용하는 형태의 스트림은 아니다
		  	  		> DataOutputStream을 이용해서 내보낸 데이터는 반드시 DataInputStream을 통해서 받아와야하고(호환성x)
		  	  		  보내거나 받을때 주고받은 데이터 형태의 순서도 반드시 지켜주어야하기때문에 번거롭다
		  	  : 기능향상은 없고 자바의 데이터형을 byte형으로 변환하지않고 직접 외부장치로 입출력하는 기능을 추가한다
		  3. PrintStream : 사용자 편의성 + 기능향상을 동시에 하는 보조스트림
		  				   내부적으로는 Bufferedstream과 연결되어있다
		  				   사용자 편의를 위해 자바의 데이터 형태를 그대로 출력하도록 되어있다
		  				   또한 파일과 직접 연결가능한데 내부적으로 기본스트림을 만들어서 처리하기 때문에 이게 가능하다
		  				   	> 기본스트림이 없는게 아님. 내부적으로 만드니까 보기에 직접연결되는 것처럼 보이는 것
		  				   쌍을 이루는 입력용 스트림이 없다
		 
		 
		 
char(문자)단위의 스트림 : 한번 입출력할 때 2바이트 단위로 입출력할 수 있는 스트림
						: 기계어 상태의 내용은 절대 문자단의로 입출력해서는 안된다
						 	> 오직 텍스트문서에 한해 사용 
							> 기계어 문서는 반드시 byte 단위의 입출력을 사용
								> 2byte가  1char가 될때, 바이트의 순서가 바뀌기 때문
									예 ) 가 : ㄱ > 0011	/ ㅏ > 0101 이라고 가정하면 01010011로 보내야하는데 문자열은 00110101로 보내버림
											> 2진수는 오른쪽에서 왼쪽으로 읽는다
											
	종류 )
		1. FileWriter / FileReader : 파일에 직접 연결된 스트림(기본 스트림)
								   : 단위는 문자단위, 내부적으로 문자단위로 처리함
	필터 클래스 )
		1. BufferedWriter / BufferedReader : 중간에 버퍼기능을 추가하여 스트림의 성능향상을 꾀한 스트림
				> 주요함수 ) char의 기본 함수에는 문자열을 읽을 수 있는 함수가 없다
					1. readLine() : 한줄 단위로 문자열을 그대로 읽어 사용할 수 있는 함수
						> 줄바꿈을 아는 방법 : 줄바꿈 = 엔터인데, 엔터에도 코드값이 있음(보이지않을 뿐) 
						> 주의 ) 이 함수는 줄 단위로 한줄씩 읽는 함수이다
								 이 말의 의미는, 줄단위(\r\n)를 발견하면 그곳에서 읽는것을 멈춘다는 것이다
								 참고로 필요에 따라 줄단위를 강제로 추가해야하는 경우가 있을수 있다
								 	> 꺼내올때는 줄단위로 꺼내오지만 꺼내온 데이터에는 줄바꿈이 사라져있기 때문
		2. PrintWriter : PrintStream과 유사하다
					   : buffer 기능을 가지고 있고 직접 파일에 연결할 수 있다
					   : 사용자의 편의 향상을 도모하기 위해 자바의 데이터형을 그대로 출력한다
					   
					   
**주의**
	1. 스트림은 반드시 같은 방향끼리 연결해야한다
	2. 반드시 같은 크기만 연결해야한다
		> 예 ) fileInputStream fin = new fileInputStream("경로");
			   BufferedReader br = new BufferedReader(fin); 	> 불가능. fileInputStream는 byte단위, BufferedReader는 char단위라 사이즈가 안맞음
			   
	참고 스트림 
		InputStreamReader / OutputStreamReader : 크기가 다른 두개의 스트림을 연결할 때 사용하는 보조 스트림
											   : 이때 사용하는 타겟 스트림은 반드시 바이트기반이어야한다
			예 ) FileInputStream fin = new FileInputStream("경로");
				 InputStreamReader tmp = new InputStreamReader(fin);
				 BufferedReader br = new BufferedReader(tmp);


객체 직렬화 : 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로 상대방(외부장치)과 입출력 할 수 있다
			  이때, 객체 내의 함수는 제외되고 해당 클래스의 변수 내용만 입출력이 된다
			  이처럼 클래스가 다른 장치에 전달되는 상태를 직렬이라고 표현한다
			  	참고 ) '직렬화'? > 클래스의 변수 내용이 순서대로 입출력되기 때문에 붙여진 이름
			  아무 클래스나 입출력되는 것은 아니고, 해당 클래스가 반드시 직렬화 가능한(serializable) 클래스여야한다 
			  	> serializable라는 인터페이스를 구현한 클래스이여야함
	주의 ) 직렬화는 함수를 제외한 변수의 내용만 입출력되므로 네트워크처럼 서로 떨어진 경우, 양쪽에 같은 클래스가 존재해야한다
			> 클래스구조는 전달되지않고 변수내용만 전달되기 때문에 양쪽 모두 클래스의 구조는 가지고 있어야하고
			  양쪽에 있는 클래스는 클래스이름 + 패키지이름 + 클래스버전이 모두 동일해야한다(한족에서 변경하면 호환안됨)
			> 이때 사용하는 보조 스트림 : ObjectInputStream / ObjectOutputStream
											> 주로 네트워크에서 많이 사용되므로 문자기반 스트림은 존재하지 않는다
											

IO공부는 필요한 데이터를 저장하고 파일에 저장된 내용을 불러올 수 있으면 됨														 