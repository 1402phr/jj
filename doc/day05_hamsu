# day05

함수(Method, Function) : 한가지 작업을 실행하기 위해서 만든 가장 작은 단위의 프로그램
						 기능의 기본 단위

프로그램 : 함수들이 모여서 원하는 목적을 이루도록 구성된 것
			예 ) charAt() : 문자열중에서 한 문자를 알아내는 작업을 실행하기 위해 만들어진것
			 	 random() : 난수 하나를 발생시키는 작업을 실행하디 위해 만들어진것
			
		**참고**
				1.  함수는 누군가가 호출해야 실행된다
					(스스로 실행되는 경우는 없음)
				2. 함수는 실행이 완료되면 자신을 호출한 곳으로실행순서를 넘긴다
				   (코드는 왼쪽에서 오른쪽으로 작성되므로 실행완료되면 아래줄의 왼쪽으로 돌아간다는 의미)
				   (대입의 경우를 예로 들면 쉽다. 함수가 실행되면 왼쪽의 변수에 값을 대입함)
				   
				예 ]
					class Test
						void abc() {
							 (1)
						} 
						public static void main(String[] args) {
							(2)
							xyz() 호출
							(3)
						}
						
						void xyz(){
							(4)
							abc() 호출
							(5)
						}
					}
					실행순서 : 2 > 4 > 1 > 5 > 3
				
함수 만드는 방법 
	형식 : [접근지정자] [속성] 반환값타입 함수이름(매개변수리스트){
						함수의 목적을 달성하기 위한 프로그램 = 코드
			}
	 > 반환값타입 : 기본타입, 클래스타입, 배열타입(ex. int[] / int[][])
	 				함수를 실행한다는 것은 함수의 목적을 달성해야만 하는것인데 목적에 따라 결과가 존재하는 경우도 있다
	 				(실행결과를 알려주는 것으로 반드시 결과가 존재하는 것은 아니다)
	 				단, 반환값이 없는 경우에도 반환값이 없다는 의미의 void라고 기술해야한다
	 					예 ) print()는 단순히 콘솔화면에 출력하는 것으로 반환값이 없다
	 					 	 sum()은 인수들의 합을 구하는 함수로 반환되는 결과가 필요하다
	 				단순히 결과값의 데이터 종류만 선언하면됨
	 				**자바에서 함수의 반환값은 반드시 특정타입 하나로만 반환해야한다
	 					예 ) char charAt(int position)의 결과는 문자로 나타나므로 반환값타입은 char이다
	 					
	 >함수이름 : 개발자가 지정하는 정의어 (첫글자에 숫자불가, 특수문자$_만 가능, 첫글자는 소문자, 카멜 표기법)
	 
	 >매개변수리스트 : 콤마 단위, 변수 선언형태로 만든다 
	 				  (목적에 필요한 데이터를 기억시켜서 함수 내부에서 사용하는것
	 				   필요한만큼 정해서 쓰면 되니까 개수는 지정하지 않고 리스트라고 부름)
	 					예 )charAt(int position) : 원하는 위치의 문자를 알려주는 함수
	 											   이 함수의 목적 달성을 위해서는 위치값이 필요하다
	 						length() : 문자열의 길이를 알려주는 함수
	 								   이 함수의 역할 수행을 위해서는 데이터가 필요없다
	 								   
	 								예  ] String str = 'abc';
	 								   	 str.length(); > 가능함 앞에오는 .가 소속을 밝혀줌
	 								   	 				 자신이 기억한 문자들의 개수만 세서 알려주면 됨
	 								   	 				 
	함수의 형태
		1. void abc(){} : 반환값X / 매개변수X
		2. int abc(){} : 반환값O / 매개변수X
		3. void abc(int a){} : 반환값X / 매개변수O
		4. int abc(int a){} : 반환값O / 매개변수O


return : 함수 안에서 사용할 수 있는 명령
	의미 
		1. 함수 실행을 종료하라 
		2. 반환값이 있으면 반환값을 내보내고 종료하라
	
	형식
		1. return; : 함수실행을 즉시 종료 (반환값이 void)
					 생략 가능
		2. return 데이터; : 데이터를 반환하고 함수실행을 즉시 종료(반환값이 있는 경우)	
		
		
함수의 사용방법 = 호출
	형식 : 함수이름(데이터1, 2, ..., n);
	 > 데이터 : 매개변수리스트(argument), parameter(함수가 준비한 매개변수 리스트에 기억할 데이터를 제공하는것)
				함수 실행을 위해서는 반드시 필요한 데이터를 입력해야한다
				데이터는 매개변수리스트와 개수/형태가 일치해야한다
				데이터는 정의된 매개변수에 대입되어 실행되며, 매개변수는 함수 안에서 사용되는 지역변수이다
			예)
				void abc(int a){}
				
				abc();       > X :필요한 데이터가 없다
				abc(5);		 > O 
				abc(3.14);	 > X : 데이터의 형태가 불일치
				abc(3, 4);	 > X : 데이터의 개수가 불일치
				
반환값 사용방법 
	1. 함수 실행이 종료된 결과값
	2. 함수의 호출부분(위치)에 그대로 들어온다
	따라서, 함수 호출 부분에 예상되는 반환값을 기록해보고 문법적으로 이상이 없으면 그것이 반환값의 사용이 된다
		예 )
			Float abc(){
				return 3.14F;
				}
			int no = 20 + abc();  > X : 타입불일치(형변환해주면 가능)
			
		예 )
			int abc(){
				int k = ?;
				return k;      ---5라고 가정
			}				
			
			void xyz(int a){
			}
			
			int lum(int a){
				return ??;
			}
			
			abc(); 	> 5  : 반환값이 있는 함수라도 필요하지 않으면 사용하지않아도 상관없다
			int a = abc();   > int a = 5;
			System.out.println(abc());
			xyz(abc());		> xyz(5);
			
			abc(lum()); 	> abc(10);		> abc()는 데이터가 들어가면 안됨 / 실패
			
클래스 블럭 아래에 올 수 있는 것
	변수 또는 함수를 만듦 (멤버가 될만한 것들이 온다)
	일반명령이 들어가면 오류가 난다
	

