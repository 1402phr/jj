객체지향언어(Object Oriented Programming = OOP)
	클래스를 이용해서 프로그램을 만드는 언어
	> 클래스를 기반으로 만들어진 객체(Object)로 프로그램을 만드는 언어
	> 비유하자면, 준비된 설계도를 가지고 적절한 위치에 조립하여 원하는 프로그램을 만드는 것
	
클래스 : 하나의 목적을 달성하기 위해서 필요한 기능을 모아놓은 프로그램의 단위
	자바에서는 함수를 Method와 함수로 구분하기도 하고 합쳐서 그냥 함수라고도 하는데 관점이 다를뿐이지 맞는말임
	
	예 )
		문자열을 관리하고싶다 > String
		네트워크를 처리 > Socket
		많은 양의 데이터를 한번에 보관하고 관리 > ArrayList, Vector...
	
	구성요소 
		1. 변수 : 필요한 데이터를 기억하고 있는 녀석을 만드는 것	(Field)
 		2. 함수 : 목적달성을 위해 기능하는 것	(Method)
 		
 	만드는 방법
 		[접근지정자] [속성] class 클래스이름 { 변수; } /변수;자리에 변수선언;/함수;/함수선언;이 들어가도 무방함
 		
 		**이 클래스는 설계도에 불과하다
 		  즉, 클래스만 가지고 있다고 해서 이것이 실행되는 것은 아님
 		  
 		  클래스를 실행 가능한 것으로 만드는 것을 객체(Object)
 		 
객체를 만드는 방법 : JVM(자바가상머신)이 만들어줌
 					 개발자는 필요한 부품을 만들어달라고 명령만 하면 됨
 						 
 			형식 : 클래스이름 변수이름;		>변수선언
 				   변수 = new클래스이름();
 				   
 				   클래스이름 변수이름 = new 클래스이름();		>위에 형식을 한줄로 고친것(이렇게 써도 됨)
 				   			  reference   +	 instance	= object
 				   
 			  >이때 변수를 레퍼런스(reference), new 명령으로 heap영역에 만들어진 것을 인스턴스(instance)라고 한다
 			   그런데 프로그램에서 무언가를 사용한다는 것은 메모리에 올려진 것을 사용한다는 것이기 때문에
 			   올려진 메모리의 주소를 모르면 사용할 수 없다
 			   따라서 엄격한 의미로 객체는 레퍼런스와 인스턴스를 하나로 묶어서 부르는 말이다
 				  
 				  예 ) Test라는 클래스가 존재함
 				 		]
 				 			Test t1;			> 변수선언 / 이 변수는 레퍼런스 변수
 				 			t1 = new Test(); 	> new한 결과이므로 인스턴스
 				 		
 				 		]
 				 			calss Test {
 				 				int a;
 				 				float b;
 				 				char ch;
 				 				void abc(){}
 				 				int xyz(){}
 				 				}
 				 			>객체로 사용하는 방법 : 
 				 				Test t1 = new Test();
 				 				t1.a;
 				 				
객체 사용 방법
	객체를 사용한다 = 목적 달성을 위해 필요한 데이터를 기억시키거나 필요한 기능을 실행한다
	
	형식 : 주소.변수
		   주소.함수()
		  
		예) t1.a;
			t1.ch;
			
			t1.abc();
			
		**C언어에서처럼 -> 기호는 절대로 사용하지 않는다
		  오직 .만 이용해서 사용한다(소속밝힐때 쓰는 그 .)
		  
		cf) Test t1 = new Test();
			Test t2 = new Test();
			
			여기서 t1.a와 t2.a는 heap에 별개의 주소를 가지고 있음(서로 독립적 개체)
			
		클래스 하나당 오브젝트는 복수개 만들어도 상관없다
		(설계도 한장으로 물건을 여러개 만들듯이)
		이때 주소를 이용하여 사용하므로 각 오브젝트는 독립적으로 실행될 수 있다
 				 				
변수의 종류
	지역변수 : 해당 블럭 안에서만 사용할 수 있는 변수
			   그 문장이 실행되는 순간 변수가 생성되고 그 블럭을 벗어나면 사라진다
	
	전역변수 : 클래스 블럭 하위에 생성되어 모든 지역에서 사용할 수 있는 변수
			   탄생시점 > 해당 클래스를 new 시키는 순간
			   소멸시점 > 프로그램이 종료될 때	
			   
객체의 배열
	하나의 클래스를 가지고 복수의 오브젝트를 만들 수 있고, 그 오브젝트들을 배열로 묶어 관리할 수 있다
	
	형식 : 클래스이름[] 변수이름;
		   변수이름 = new 클래스이름[개수];	 	  	
		   
	예 ) Test[] t = new Test[5];		> 데이터를 기억할 공간(여기서는 5개)만 만들었다는 의미
		 t[i] = new Test[];				> 각 공간에 데이터를 채워주어야함
 				 
 	사용방법 : 변수이름[위치값].멤버변수이름;
 			   변수이름[위치값].함수이름();		   