#day06 

멤버 : 
	클래스는 해당 클래스의 속성을 기억할 변수와 이를 가지는 기능을 만들어놓은 함수로 이루어져있다
	따라서 클래스가 객체화되면 변수와 함수도 사용할 수 있게 된다
	이때 이 변수와 함수를 멤버라고 표현한다
	
	따라서, 클래스가 가지는 변수와 함수를 사용하는 방법은 먼저 클래스를 객체로 만든 후 사용해야한다
	
	형식 : 클래스이름 변수이름 = new 클래스이름();
		   변수이름.변수
		   변수이름.함수();


		   
함수의 오버로딩(Over loading : 함수의 중첩) @See day05 - Ex07 / java.lang - class - 아무거나
				*Overriding과 구분해야함*
	원칙적으로 같은 클래스 안에서는 함수의 이름은 모두 달라야한다
	같은 클래스 안에서 같은이름의 함수가 존재하면 에러(식별자가 동일할 수 없음)
		>이름을 짓기도 힘들고 가독성에도 문제가 발생
		 (함수이름만 봐도 기능을 알 수 있어야하는데 이름이 모두 다르다보니 비슷한 기능을 하는데도 전혀 다른 이름을 사용하니까)
	이런 불편함을 해결하기 위해 도입된 문법이 오버로딩
	
	즉, 함수의 오버로딩이란 다음의 조건을 준수하는 범위 안에서 같은 클래스 안에서 같은 이름의 함수를 만들 수 있는 것이다
		조건 ) 0. 함수가 존재해야함
			   1. 함수의 이름이 같아야한다 
			   2. 매개변수 리스트는 달라야한다
			   		>변수의 이름은 상관없고 개수 또는 순서가 달라야한다
			   3. 반환값과는 전혀 상관없음
			   
		예 ) java.lang - class에서 아무거나 들어가볼것
			 같은 String()이지만 매개변수의 개수나 이름은 다양하다
	
	오버로딩은 매개변수의 개수, 순서, 형태 중 하나 이상이 달라야한다
		(타입의 순서가 동일하다면 매개변수의 순서가 달라졌다해도 동일한 것으로 취급 @See day05-Ex07)
		


생성자 함수(Constructor) 
	클래스를 사용하기 위해 객체로 만드는 순간 new라는 명령을 주는데, new 시키는 순간 자동 실행되느 함수
		>new 명령은 생성자 함수에서만 쓴다(클래스 내용을 그대로 복사하여 메모리에 올리라는 의미)	
	즉, 클래스를 new 시킨다느 것은 클래스를 오브젝트로 만들어서 실행한다는 의미
	따라서 이때 실행한다는 개념은 결국 오브젝트(객체)를 만드느 순간, 뭔가를 실행한다는 개념이다
		>물건(오브젝트, 함수)을 만들기 위해 필요한 조치를 한다는 의미
		>new는 실행 가능한 것으로 만들기 위한 함수이다\
		
		붕어빵을 만드는데 필요한 밀가루와 앙금을 넣어야하는데 틀(클래스)에 밀가루 등의 재료(함수, 변수)를 넣는(new) 것
		메모리에 올리며 기본셋팅값(초기화값)을 올리는게 생성자함수
		
	클래스는 한가지 목적을 달성하기 위해 만들어진 기본단위
	이 안에는 그 목적을 달성하기 위한 변수와 함수로 구성된다
	하지만 목적 달성을 위해서는 기본적 조치가 필요한 조치가 있다(예 : 점수 기억 변수에는 기본적으로 기억할 점수가 필요)
	
		예 ) String
				: 문자열을 관리할 목적으로 만들어진 클래스
				  문자열을 기억하고 있어야한다(기억할 문자열이 필요)
				  이때 필요한 문자열의 초기화 기본값을 만들어주는 것이 생성자 함수
				  
			FileOutputStream 
				: 파일에 내용을 기록할 목적으로 만들어진 클래스
				  파일을 사용할 수 있도록 열어놓아야한다(기본적 조치)
				  
			Socket 
				: 네트워크 구성이 목적인 함수
				  상대방이 접속해야함(기본적 조치)
				  
	프로그램은 프로그램답게 무언가를 처리하기 위해서는 함수가 필요
	위의 경우를 보면 각 클래스는 오브젝트로 만들어지는 순간, 그 클래스의 기능을 하기 위해 기본적 조치를 해줄 필요가 있다
	이 기본적 조치릘 취해주는 것이 생성자 함수이다
	즉, 생성자 함수를 만드는 이유는 만들고자 하는 클래스의 목적 달성을 위한 기본조치를 해주기 위함이다
	
생성자함수 만들기 
	규칙 
		1. 함수의 이름은 반드시 클래스 이름과 동일해야한다
		2. 반환값을 적어서는 안됨
		3. 매개변수를 가질 수 있다
	주의 : 생성자 함수를 만들지 않아도 사용할 수 있다
		   단, 이때는 JVM(자바가상머신)이 기본생성자를 만들어서 호출함
		   생성자 함수를 하나라도 정의하게 되면 JVM은 기본생성자를 만들지 않는다
		   따라서 생성자를 정의할 때, 반드시 기본생성자(매개변수가 없는 생성자)도 같이 정의하는 것이 좋다
		   
	참고 : 생성자 함수도 오버로딩이 가능 = 여러개 정의할 수 있다
	
생성자 함수 이용방법 	
	생성자 함수는 그 클래스를 어떻게 new 시킬지를 알려주는 함수
	즉, 생성자 함수가 요구하는 매개변수를 알면 그 클래스를 객체화시킬 수 있다
	
	참고 ) 
		this : 현재 실행중인 객체 자기 자신을 가리키는 예약어
			   이름이 같으면 this로 구분할 수 있는데 @See day06-Ex01
		this() : 생성자 함수는 원칙적으로 개발자가 직접 호출할 수 없다
				 이 함수는 현재 실행중인 변수의 생성자 함수를 호출해줌
				 현재 생성자를 실행하는 도중, 다른형태의 현재 클래스의 생성자를 강제 호출하는 유일한 방법
				 	규칙
				 		1. 반드시 생성자 안에서만 사용할 수 있다(일반 함수 안에서 사용 불가)
				 		2. 반드시 생성자 함수의 첫 문장, 첫 명령으로 사용해야한다
				 		3. 
				 		
				 	예 ) Ex07("제니");		> 오류
				 		 this("제니");		> 안오류