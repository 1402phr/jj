#day13

스레드가 있는 프로그램의 종료
	: 일반적으로 스레드가 존재하지 않는 프로그램은 main()이 종료되면 프로그램도 종료된다
	: 하지만, 스레드가 있는 프로그램의 종료는 main()뿐만 아니라 스레드도 종료되어야한다
	: 스레드를 강제로 종료하는 방법 ) 
			> stop();  : 이 명령은 사용금지명령 (@see - day12 - thread - Test06)
							> 자바측에서는 이 함수를 사용금지명령으로 만들었다
							  대신 스레드 종료를 위해서는 가급적 스레드가 할 일을 마치고 스스로 종료되는 
							  방향으로 프로그램을 제적할 것을 권한다
							  즉, run()이 자연스럽게 종료되도록 코드를 만들라는 의미
							> main()이 종료되면 프로세스 프로그램이 종료되듯, 
							  run()이 종료되면 스레드 프로그램이 종료된다
							> run()은 제어변수를 이용하여 반복하도록 처리하고 이 제어변수를 조작하여 run() 종료를 유도한다
								참고 ) setIsStart(false);	@see - day12 - SleepThr01, 02 /getters and setters 만들면됨
								예 ) 
									private boolean isStart = false;
									while(isStart){ break; }	> isStart가 true가 되면 반복 종료 
									private boolean isStart = true;
									while(isStart == false){ break; }	> isStart가 false가 되면 반복 종료
							> 한번 dead된 스레드는 다시 실행되지 못한다
							  만약 재실행을 원한다면 new born부터 다시 시작해야한다
	: 일시중지 > suspend() > resume()을 호출해야 재실행 가능
	: 설정한 시간만큼 멈췄다가 자동 재실행 : sleep() 
	
	
	
동기화 처리(Synchronize) [ <> 비동기 : JQuery 함수 사용(Ajax() : 페이지 일부분만을 변경시키겠다) ]
	 : 스레드의 장점은 메모리를 공유한다는 것
	   다만 이것이 어려운 개념인 이유는 스레드가 어디까지 실행하는지 모르기 때문이다
	   따라서, 스레드가 어디까지 실행할지를 묶어두는 기능을 만들었고 이것이 동기화이다
	   	종류 )
	   		1. 변수의 동기화 : 스레드가 특정 기능을 마칠 때까지 그 변수를 다른 스레드가 사용하지 못하도록 막는 방법
	   			형식 ) synchronized(변수) {} 
	   			의미 ) 하나의 스레드가 블럭{} 안의 내용을 모두 실행완료하기 전까지는 다른 스레드에서 이 변수를 사용하지 못하게 하는 것
	   		2. 함수의 동기화 : 스레드가 특정 함수를 실행하는 동안에 다른 스레드가 해당 함수를 사용하지 못하게 하는 것
	   			형식 ) synchronized 반환값 함수이름(매개변수리스트) {}
	   			의미 ) 하나의 스레드가 이 함수를 실행중인 동안에는 다른 스레드에서 이 변수를 사용하지 못하게 하는 것
	 	참고 ) 동기화는 항상 성립하는 것이 아니고 두개 이상의 스레드가 변수나 함수를 공용으로 사용하는 경우에만 성립한다
	 	       만약 두 스레드가 별개의 함수나 변수를 사용한다면, 이것은 동기화 처리를 해도 영향을 받지 않는다
	 	       또한, 두개 이상의 스레드를 만든다는 것은 대부분 별도의 작업을 수행하기 위함이기 때문에, 
	 	       공유 데이터가 존재하는 경우, 문제가 생길 수 있다
	 	동기화의 문제점 ) 한 스레드가 작업을 완료하는 도중에 다른 스레드는 작업을 할 수 없다 > 스레드를 사용하는 의미가 사라짐
	 	문제점의 해결방법 ) 서로가 병행처리를 하면서 공유데이터를 손상시키지 않도록 한다
	 							1. 특정 스레드가 작업을 해서는 안되는 시점이 되면 스스로 block 상태로 전위되도록 한다
	 								> wait();
	 							2. 다른 스레드 입장에서는 상대방 스레드가 작업을 해도 괜찮은 상태가 되면 
	 							   상대방 스레드를 runnable 상태로 전위시킨다
	 							   	> notify();
	 							참고 ) wait와 notify는 반드시 동기화 함수 안에서 사용해야한다
	 							
	 							
자신을 block 상태로 만드는 방법
	1. sleep() : 지정한 시간동안 스스로를 block 상태로 전위
					> 시간이 지나면 알아서 runnable 상태로 전위되므로 별도의 함수 호출이 필요 없음
	2. join() : 다른 스레드가 종료되기 전까지 스스로를 block 상태로 만듦




Date 클래스 : 날짜와 시간을 관리하는 클래스
				> java.util - Date 확인하면 대부분의 함수가 Deprecated 되어있다 > 쓰면 취소선+회색되어서 가능한 사용하지 말라는 함수 
	생성자함수 ) Date() : 현재 시스템의 날짜와 시간을 이용해서 관리한다
	참고 ) 이 클래스는 버전업된 Calender 클래스가 있으므로 사용을 권장하지 않는다
		   다만, 아직 Date 클래스를 사용해야하는 함수가 존재한다
		   
		   
Calender 클래스 : Date의 버전업 클래스
				  추상 클래스이므로 new 시켜 사용할 수 없다
	생성방법 ) 
		 Calender cal = new Calender();	> 불가능!!						
		 Calender cal = new Calender.getInstance(); > 가능
	주요함수 ) get(int filed); : 필요한 정보를 알려주는 함수
								 이 함수는 int field에 알고자 하는 내용을 알려주면(연, 월, 일..)
								 그 값을 알려준다
									> Calender 클래스는 각 변수가 무엇을 알기 위한 변수인지를 이해하면 도움이 된다
			   getTime(); : Calender 클래스를 Date 클래스로 변환해주는 함수
			   				 > 실무에서는 캘린더 클래스로 작업하다가 필요한 순간에 데이트 클래스로 
			   				   변환하여 사용할 필요가 있다
			   				   	예 ) Calender cal = new Calender.getInstance();
			   				   		 ...
			   				   		 Date d = cal.getTime();
			   				   		 	> 필요한 곳에 d를 사용하면 됨
			   				   		 	
			   				   		 	
			   				   		 	
형식화 클래스 : 주로 처리된 결과를 보기좋게 출력하기 위함
			    (문자열 형식을 만들어놓고 그 형식에 맞춰 데이터를 문자열로 만들어주는 클래스)
			    교재 p.540 확인
	종류 )
		1. DecimalFormat : 처리 결과 중, 숫자를 보기좋게 만들기 위한 클래스
			생성방법) DecimalFormat(String pattern) 
					 	> 숫자를 어쩐 형태의 문자열로 변환시킬지 패턴을 알려주어서 만듦
			주요함수) format(double number) : 숫자를 원하는 문자열로 변환시켜주는 함수
			패턴지정법 ) 
				1. 0 : 한자리 숫자를 의미, 무효숫자도 표시
				2. # : 한자리 숫자를 의미, 무효숫자는 표시하지않음
				3. . : 소수점 위치
				4. - : 음수일 경우, -부호의 위치를 알려줌
						> 예 ) -123 = 123-
				5. , : 세자리마다 ,를 표시하도록 한다(돈 세는 법)
				6. E : 실수일 경우, 지수 형태로 표시되도록 한
				7. : : 패턴을 구분한다. 양수와 음수의 경우를 구분하여 사용
				8. % : 백분율
				9. \u00A4 : 화폐단위
		2. SimpleDateFormat : 날짜 데이터를 문자열로 변환해주는 클래스
								> 교재 p.544 확인
		3. ChoiceFormat : switch~case 등을 이용해야하는 경우, 이것을 간소화시키는 방법
						  특정 범위의 값을 특정 문자열로 교체해서 출력한다
			생성방법 ) ChoiceFormat(double[] limits, String[] formats)
					   	> double[] limits : 치환된 범위
					   	> String[] formats : 치환할 문자 
		4. MessageFormat : 특정 문자열, 특정위치의 내용이 변경되는 경우
						   문자열 전체를 만들지 않고 변경되는 내용만 변화시켜서 
						   하나의 문자열을 만들어내는 클래스
						   	> 교재 p.549 확인
		 