#day14

PreparedStatement : 질의명령을 DB에 전달하는 도구인 Statement의 일종
					Statement는 질의명령을 실행할 때마다 매번 DB에 전달해야해서 불편한데
					DB는 네트워크를 사용하므로 질의명령의 길이가 긴 경우, 속도가 느리다는 문제가 있다
					이 문제점을 해결하기 위한것이 PreparedStatement
					
					이것은 미리 질의명령을 보내놓은 후 실행이 필요할 때 실행을 요청하는 형식
						> 매번 질의명령을 전달할 필요가 없음
						
					보통 작업을 하면 중복되는 질의명령이 많은데 이때, 개발자의 편의를 위하여
					미리 질의명령을 알려주는 전속 Statement를 만들어놓고 실행만 부탁한다
					
			만드는 방법 ) con.prepareStatement();
			참고 ) 자주 사용하는 질의명령이라도 안에 들어가는 데이터가 다를 수 있다 
				   이때, 변화되는 데이터 부분은 ? 로 대신한다
				   그리고 ? 부분은 실행 직전에 채우는 방식으로 작업한다
				   단, 데이터만 변경 가능할뿐, 컬럼 이름에는 ?를 넣을 수 없다
				   	예 ) String sql = "SELECT * FROM emp WHERE ename = ?";
				   		 주요함수 ) ? 를 채워주는 함수 > setXXX(위치, 데이터);
				   		 				> 이때 위치는 물음표의 위치를 가리키며, 1부터 시작하고 여러개일 경우, 왼쪽에서부터 숫자를 매긴다
				   		 				  데이터는 채울 데이터를 의미한다
				  Statement의 경우, 속도는 느리지만 매번 다른 질의명령을 처리할 수 있다
				  PrepaerdStatement는 속도는 빠르지만 같은 질의명령만 처리 가능하다
				  
				  
				  
SELECT 질의결과 사용하기 : 	JDBC에서 SELECT 질의명령을 던지면 
							그 결과(인라인테이블)를 ResultSet이라는 인터페이스가 관리하도록하고있다
							
							따라서 리저트셋이라는 인터페이스를 이용하여
							인라인테이블의 결과중 필요한 데이터만 선택하여 사용 가능하다
							
							이때, 인라인테이블의 결과중 원하는 데이터를 꺼내는 방법은
							몇번째줄, 몇번쩨 칸의 데이터를 꺼내라, 가 아니라
							현재 작업줄의 몇번째칸 데이터를 꺼내라, 라고 명령한다
							(현재 작업줄 : 가상의 레코드 포인트. 처음에는 bof에 가있다)
							
	중요함수 )
		1. 가상의 레코드포인터(현재 작업줄) 이동시키기
			absolute(int row) : 지정한 행으로 바로 이동
			afterLast() : eof로 이동
			beforeFirst() : bof로 이동
			first() : 1번행으로 이동
			last() : 마지막행으로 이동
			next() : 현재 위치에서 다음행으로 이동
			previous() : 현재 위치에서 이전행으로 이동
				> afterLast() / beforeFirst()는 항상 이동에 성공한다
				  bof와 eof는 인라인테이블이 생기면 자바가 자동으로 만들어주는 가상의 위치
				> 나머지 함수들은 결과가 아예 없거나 현재 위치에 따라서 이동에 실패할 수 있다
				
		2. 데이터를 꺼내는 함수
			getXXX() : XXX는 꺼낼 데이터를 사용할 데이터 형태이름(int, String, .. )
						> 실제 DB에 있는 형태가 아니라 자바에서 사용하고 싶은 형태로 꺼내면 됨
						  (데이터베이스에 있는 형태와 달라도 괜찮다. 하지만 number를 char로 가져오면 너한테 대체 무슨 이득이 있겠냐)
			getXXX(필드위치) : SELECT절에 나열된 위치를 알려주는 방식
							   자바는 인덱스(위치값)가 0부터 시작하지만 JDBC는 1부터 시작한다(DB의 인덱스는 1부터 시작)
			getXXX(필드이름) : 필드 이름으로 알려주는 방식
							   만약 별칭으로 데이터를 조회했다면 꺼낼때도 별칭으로 꺼내야한다
							   	> 예 ) empno eno로 조회 = 꺼낼때도 eno로 꺼내기
							   	
		3. 양방향이동이 가능한 인라인테이블 만들기 : 1번 방법으로 레코드포인터를 이동시키는데 항상 양방향 이동이 가능한 것은 아니다
													 (디폴트는 아래쪽으로 이동만 가능)
			방법 )
				1.  Statement를 양방향 스테이트먼트로 만들기
						형식 ) createStatement(int resultSetType, int resultSetConcurrency)
									> int resultSetType : resultSet 안에 상수로 정의되어있음
													: ResultSetType.TYPE_FORWARD_ONLY > 앞방향 이동이 가능한 인라인 테이블을 만든다
													: ResultSetType.TYPE_SCROLL_INSENSITIVE > 양방향. resultSet을 수정 불가능하도록 한다 
																							> 변경된 사항을 적용시키지 않는 ResultSet을 만든다
																							> 가장 많이 씀
													: ResultSetType.TYPE_SCROLL_SENSITIVE > 양방향. resultSet을 수정 가능하도록 한다
																						  > resultSet을 수정한다 = 결과값을 수정한다
																						  > 변경된 사항을 적용시켜서 ResultSet을 만든다
									> int resultSetConcurrency
													: ResultSet.CONCUR_READ_ONLY : JDBC에서 테이블을 수정할 수 없도록 한다
													: ResultSet.CONCUR_UPDATABLE : JDBC에서 테이블을 수정할 수 있도록 한다
														> sql 디벨로퍼에서 테이블 내용을 함수없이 직접 수정할 수 있는 것과 비슷한 기능
						예 ) Statement stmt = con.createStatement(ResultSetType.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);								
어 오늘도 반택왓네






























앗 오늘 광군제 하는 날인데 어제 국내에서 신나게 질렀네
맨투맨 20 하나, 15 5벌, 힝구시점 풀셋, 쿠키도 300개 굽고